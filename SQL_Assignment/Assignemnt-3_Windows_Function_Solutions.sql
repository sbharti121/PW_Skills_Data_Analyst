use mavenmovies;

-- Question 1: **Rank the customers based on the total amount they've spent on rentals.**
select customer_id, sum(amount) as rental_amount, 
rank() over(order by sum(amount) desc ) as Customer_Rank from payment group by customer_id;

-- Question 2: **Calculate the cumulative revenue generated by each film over time.**

SELECT 
    f.film_id, 
    f.title, 
    r.rental_date, 
    SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY r.rental_date)AS cumulative_revenue   -- need to join film,rental,inventory & payment table to get film_id & amount--
FROM
    film AS f
        inner JOIN
    inventory AS i ON f.film_id = i.film_id          -- join film & inventory table--
        inner JOIN
    rental AS r ON r.inventory_id = i.inventory_id   -- join rental & inventory table--
        inner JOIN
    payment AS p ON p.rental_id = r.rental_id        -- join rental & payment table--
ORDER BY
    f.film_id, f.title, r.rental_date;


-- Question 3. **Determine the average rental duration for each film, considering films with similar lengths.**
select title , film_id, avg(rental_duration) over(partition by length) avarage_rental_duration 
from film group by film_id;



-- Question 4. **Identify the top 3 films in each category based on their rental counts.**

-- Rank Function--
with category_rank as(
select f.title,
fc.category_id, 
count(r.rental_id) as rental_count, 
rank() over(partition by fc.category_id order by count(r.rental_id) desc) Category_wise_rank 
from film as f                                                                                 -- join film, film_category & rental table to get result
inner join film_category as fc on f.film_id = fc.film_id                                       -- join film & film_category table
inner join inventory as i on f.film_id = i.film_id                                             -- join film & inventory table
inner join rental as r on r.inventory_id = i.inventory_id                                     -- join inventory & rental table 
group by f.title,fc.category_id) 
select title, category_id, rental_count, Category_wise_rank from category_rank 
where Category_wise_rank in (1,2,3);

-- Dense Rank Function--
with category_rank as(
select f.title,
fc.category_id, 
count(r.rental_id) as rental_count, 
dense_rank() over(partition by fc.category_id order by count(r.rental_id) desc) Category_wise_rank 
from film as f                                                                                 -- join film, film_category & rental table to get result
inner join film_category as fc on f.film_id = fc.film_id                                       -- join film & film_category table
inner join inventory as i on f.film_id = i.film_id                                             -- join film & inventory table
inner join rental as r on r.inventory_id = i.inventory_id                                     -- join inventory & rental table 
group by f.title,fc.category_id) 
select title, category_id, rental_count, Category_wise_rank from category_rank 
where Category_wise_rank in (1,2,3);



-- Question 5. **Calculate the difference in rental counts between each customer's total rentals 
-- and the average rentals across all customers.**
with Customer_rental_count as
(select customer_id, count(rental_id) as rental_count from rental group by customer_id),
avg_rental_count as (select customer_id, rental_count , avg(rental_count) over() as avg_rental from Customer_rental_count)
select customer_id, rental_count, (rental_count- avg_rental) as diff_rental from avg_rental_count;


-- Question 6. **Find the monthly revenue trend for the entire rental store over time.**
-- By Join method
select s.store_id, monthname(r.rental_date) as month_name, sum(p.amount) as Revenue_trend from rental as r 
inner join payment as p on r.rental_id = p.rental_id
inner join staff as stf on r.staff_id = stf.staff_id
inner join store as s on stf.store_id = s.store_id
group by month_name,s.store_id;

-- by CTE method
with revenue_t as (select r.staff_id, monthname(r.rental_date) as month_name, sum(p.amount) as Revenue_trend from rental as r 
inner join payment as p on r.rental_id = p.rental_id group by month_name, r.staff_id),
store_d as (select s.store_id, rt.month_name,rt.Revenue_trend from revenue_t as rt join staff as st on rt.staff_id =st.staff_id
inner join store as s on st.store_id=s.store_id ) select store_id, month_name,Revenue_trend from store_d;


-- Question 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
with customer_spend as 
(select customer_id, sum(amount) as total_rental_spend, 
rank() over(order by sum(amount) desc) as customer_rank from payment group by customer_id) 
select customer_id, total_rental_spend, customer_rank from customer_spend
where customer_rank < ((select count(*) from customer_spend)*20)/100;   -- rank within 20% of all customer


-- Question 8. **Calculate the running total of rentals per category, ordered by rental count.**
select fc.category_id, count(r.rental_id)as rental_count, sum(p.amount) as running_total from film_category as fc 
inner join inventory as i on fc.film_id = i.film_id
inner join rental as r on i.inventory_id =r.inventory_id
inner join payment as p on r.rental_id = p.rental_id group by fc.category_id order by count(r.rental_id) desc;


-- Question 9. **Find the films that have been rented less than the average rental count for their 
-- respective categories.**
with Category_count as (select f.title , fc.category_id, count(r.rental_id) as rental_count from film as f 
inner join film_category as fc on f.film_id = fc.film_id
inner join inventory as i on f.film_id = i.film_id
inner join rental as r on i.inventory_id = r.inventory_id group by fc.category_id, f.title),
film_count as (select title, category_id ,rental_count, avg(rental_count) over (partition by category_id) as avg_count from Category_count) 
select  title, category_id ,rental_count, avg_count from film_count where rental_count < avg_count; 
-- Note-  I have print all the column like  title, category_id ,rental_count, avg_count to understand as per question we need to print only title--


-- Question 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**
select monthname(payment_date) as month_name, sum(amount) as total_revenue, 
rank() over(order by sum(amount)desc) as Revenue_rank from payment group by month_name limit 5;
